#include <windows.h>
#include <iostream>	
#include <string.h>
#include <wininet.h>

#pragma comment (lib, "wininet.lib")

using namespace std;

bool downloadFile(const string& url, const string& filepath) {
	// First, use InternetOpen() to init an internet session
	HINTERNET hSession = InternetOpen((LPCWSTR)"Mozilla/5.0",				//  Aka user-agent
										INTERNET_OPEN_TYPE_DIRECT,			//	This flag use to access direct to internet without proxy config
										NULL,								//	Specified proxy and IP if flag above using INTERNET_OPEN_TYPE_PROXY
										NULL,								//
										0);									//	Almost 0 :3
	
	if (!hSession) {														//	If not success then return false							
		return false;
	}
	// Else open url using InternetOpenUrl()
	HINTERNET hHttpFile = InternetOpenUrl(hSession,							// handle to session		
										(LPCWSTR)url.c_str(),				// url
										0,									// Headers if it needed
										0,									// Headerlength if Header are used
										0,									// Flags can be null to keep it simple
										0);									// almost 0
	if (!hHttpFile) {
		InternetCloseHandle(hSession);
		return false;
	}

	HANDLE hFile = CreateFile((LPCWSTR)filepath.c_str(),					// file path to create
								GENERIC_WRITE,								// access rights
								0,											// Sharemode = 0 to prevent other processes from request delete, read or write 
								NULL,										// SECURITY_ATTRIBUTES can be null
								CREATE_ALWAYS,								// CreationDisposition, Create_always always create a new file, overwrite if it already exists
								FILE_ATTRIBUTE_NORMAL,
								NULL);

	if (hFile == INVALID_HANDLE_VALUE) {
		InternetCloseHandle(hHttpFile);
		InternetCloseHandle(hSession);
		return false;
	}

	DWORD dwBytesRead;
	DWORD dwBytesWritten;
	const DWORD buffer_size = 4096;
	char buffer[buffer_size]{};
	bool success = true;
	while (InternetReadFile(hHttpFile, buffer, buffer_size, &dwBytesRead) && dwBytesRead != 0) {
		if (!WriteFile(hFile, buffer, dwBytesRead, &dwBytesWritten, NULL) || dwBytesRead != dwBytesWritten) {
			success = false;
			break;
		}
	}
	CloseHandle(hFile);
	InternetCloseHandle(hHttpFile);
	InternetCloseHandle(hSession);
	return success;
}